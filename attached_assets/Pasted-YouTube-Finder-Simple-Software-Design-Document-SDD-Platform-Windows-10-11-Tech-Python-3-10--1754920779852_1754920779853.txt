YouTube Finder — Simple Software Design Document (SDD)
Platform: Windows 10/11
Tech: Python 3.10+, YouTube Data API v3, CSV files only (no database)
UI: Simple desktop app (PySimpleGUI or Tkinter)
________________________________________
1) What the app does
•	Searches YouTube by multiple keywords/phrases you enter (e.g., “Product Review”, “desert camping gear”).
•	Filters results by views, subscriber count, video duration, region, language.
•	Never exceeds your user-set daily API cap (stays under YouTube’s 10,000 free-unit limit).
•	Skips channels with hidden subscriber counts.
•	No duplicates across days (keeps a CSV history of seen video IDs) unless you choose Fresh search.
•	Saves clickable video links and full metadata, including Title, Description, Tags.
________________________________________
2) What you control (in the UI)
•	Daily API cap (e.g., 9,500).
•	Start mode:Start Now (manual) or Schedule Time (HH:MM).
•	Keywords/phrases: multi-line input, one per line.
•	Duration options:
o	Short: under 4 minutes
o	Medium:4–20 minutes
o	Long:over 20 minutes
o	Custom: min/max minutes
•	Views per video:Min and/or Max (no caps; blank = ignore).
•	Subscribers:Min and/or Max (no caps; blank = ignore).
•	Region / Language (optional).
•	Pages per keyword (limits pagination, saves quota).
•	Checkboxes:
o	Skip hidden subscriber counts (default ON)
o	Fresh search (clear history)
________________________________________
3) Files it creates (CSV only)
•	Results CSV (daily):export/results_YYYY-MM-DD.csv
Columns (all filterable in the UI table):
o	title
o	description(full text; no truncation)
o	tags(comma-separated; may be empty if tags not provided by uploader)
o	video_url
o	video_id
o	channel_title
o	channel_id
o	subscriber_count
o	view_count
o	duration_minutes
o	published_at
o	keyword(which search term surfaced it)
•	History CSV (dedupe list):data/seen_history.csv
o	video_id, first_seen_date
•	Run log (optional):logs/runs.csv
o	run_timestamp, estimated_quota_used, keywords_count, results_count
Delete seen_history.csv anytime to allow duplicates again.
________________________________________
4) API usage (quota-safe)
•	YouTube Data API v3
o	search.list (100 units): find candidates per keyword
	Params: part=snippet, type=video, order=viewCount, videoDuration (mapped from UI), q, regionCode, relevanceLanguage, maxResults=50, pageToken
o	videos.list (1 unit): fetch details & metadata (up to 50 IDs)
	part=statistics,contentDetails,snippet → provides views, duration, title, description, tags (if available), publishedAt, channelId
o	channels.list (1 unit): fetch channel subs (up to 50 IDs)
	part=statistics → subscriberCount, **hiddenSubscriberCount`
•	Hard daily cap: App estimates units before each call and stops when the next call would exceed your cap.
________________________________________
5) Simple flow (behind the scenes)
1.	For each keyword:
o	Call search.list within your pages per keyword and quota cap.
o	Collect video IDs.
2.	Call videos.list in batches of 50 to get:
o	viewCount, duration, title, description, tags, publishedAt, channelId
o	Filter by views, duration.
3.	Call channels.list in batches of 50:
o	Filter by subscriber min/max.
o	If hiddenSubscriberCount = true, skip.
4.	De-dupe against data/seen_history.csv (skip already-seen video IDs unless Fresh search is on).
5.	Save results CSV with all fields; show them in the UI table (sortable/filterable) with clickable links.
________________________________________
6) UI layout (clean and simple)
Controls (left):
•	Multi-line Keywords
•	Duration: Short | Medium | Long | Custom (then show Min/Max minutes)
•	Views: Min / Max
•	Subscribers: Min / Max
•	Region / Language dropdowns
•	Pages per keyword (int)
•	Daily API cap (int)
•	Checkboxes: Skip hidden subs, Fresh search
•	Buttons: Start Now, Save Schedule…
Status (top-right):
•	Estimated quota for this run
•	Progress bar
•	Counters: scanned / kept / skipped
Results (bottom-right):
•	Filterable/sortable table with all columns above
•	Buttons: Open Video, Export CSV (additional manual export)
________________________________________
7) Scheduling
•	Save Schedule… button:
o	Saves current settings to settings.json
o	Opens a short guide (or runs a helper .bat) to add a Windows Task Scheduler job that runs:
css
CopyEdit
python app_headless.py --settings settings.json
o	Headless mode performs the same search without opening the GUI.
________________________________________
8) Acceptance checklist
•	Honors Daily API cap; never exceeds it
•	Start Now works; Schedule instructions/helper provided
•	Duration filters work:
o	Short <4, Medium 4–20, Long >20, and Custom minutes
•	Min/Max Views and Min/Max Subs respected (no built-in caps; blank = ignore)
•	Skips hidden subscriber count channels
•	Supports multiple keywords/phrases (one per line)
•	Applies Region/Language when set
•	No duplicates across days (unless Fresh search is chosen)
•	Saves Title, Description, Tags for each video
•	Saves clickable video links (URL)
•	UI table allows filtering/sorting of all columns
•	Results/History saved to CSV only (no external DB)
•	Clear README for install, API key, and scheduling
________________________________________
9) Developer notes (how to build)
•	Language: Python
•	UI:PySimpleGUI (simple windows, table filtering) or Tkinter + ttk.Treeview
•	Packages:requests, isodate, pandas, pysimplegui (or tkinter), pyyaml (if using settings.yaml)
•	Duration mapping:
o	Short: keep duration_minutes< 4
o	Medium: 4 ≤ minutes ≤ 20
o	Long: minutes > 20
o	Custom: user-provided min/max
•	Tags: from videos.list.snippet.tags (may be missing; save empty string if absent).
•	Description: full snippet.description (no truncation; CSV handles quotes).
•	Quota guard: Track planned units; before each call, if used + cost > cap, stop cleanly.
•	History: append-only data/seen_history.csv; check membership before adding results.
•	Filtering in UI: client-side data frame filters (e.g., pandas query bound to table).
________________________________________
10) Quick install (Windows)
1.	Install Python 3.10+ (check “Add to PATH”).
2.	pip install requests isodate pandas pysimpleguipyyaml
3.	Set environment variable YOUTUBE_API_KEY.
4.	Run python app.py, enter settings, Start Now.
________________________________________
11) Optional nice-to-haves
•	Velocity filter (e.g., views/day ≥ X)
•	Auto-save partial results during long runs
•	Preset profiles (Shorts day / Long-form day)
•	One-click “Open channel” button
KeyNot: Develop this software with proper error handling on very input!! And api error handling
